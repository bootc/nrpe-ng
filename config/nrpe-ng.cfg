#
# Configuration file for nrpe-ng
#
#
# This is a configuration file for the nrpe-ng server daemon. The server is run
# on the remote hosts that you wish to run the check scripts on, and hence this
# configuration file has to be there too. This is not the configuration file
# for the client tool that is run by Nagios, which connects to remote hosts.
#
# Note that this configuration file is deliberately very similar to the Nagios
# NRPE configuration file, in order to be able to read the original nrpe.cfg
# file if desired


# NAGIOS NRPE COMPATIBILITY
#
# If you wish to use nrpe-ng as a drop-in replacement for Nagios NRPE,
# uncomment the line below in order to import its configuration first. You may
# override any configuration settings below. Please note that nrpe-ng is NOT
# compatible with NRPE's network protocol, and you will need to use
# check_nrpe_ng to communicate with nrpe-ng.
#
# include=/etc/nagios/nrpe.cfg


# LOG FACILITY
#
# The syslog facility that should be used for logging purposes. This can be any
# of the standard facility names (lower-cased).
#
# Default: daemon

# log_facility=daemon


# PID FILE
#
# The name of the file in which nrpe-ng should write its process ID number.
# The file is only written if the NRPE daemon is started by the root user.
#
# Default: /run/nagios/nrpe-ng.pid

pid_file=/run/nagios/nrpe-ng.pid


# SERVER PORT NUMBER
#
# Port number that nrpe-ng will listen for connections on. Note that nrpe-ng is
# not compatible with Nagios NRPE's wire protocol, so it is recommended to use
# a different port to NRPE's (5666).
#
# Default: 59546

server_port=59546


# SERVER ADDRESS
#
# IP address that nrpe-ng will bind to. This may be either an IPv4 or IPv6
# address. If you use the IPv4 wildcard address (0.0.0.0) the service will only
# be available via IPv4; if you use the IPv6 unspecified address (::) the
# service will be available by IPv6 and will probably also be available via
# IPv4 depending on your networking configuration.
#
# Default: ::

# server_address=::


# NRPE USER
#
# This determines the effective user that the NRPE daemon should run as.
# You can either supply a username or a UID.
#
# Default: nagios

# nrpe_user=nagios


# NRPE GROUP
#
# This determines the effective group that the NRPE daemon should run as.
# You can either supply a group name or a GID.
#
# Default: nagios

# nrpe_group=nagios


# ALLOWED HOST ADDRESSES
#
# This is an optional comma-delimited list of IP addresses that are allowed to
# talk to the NRPE daemon. Network addresses with a bit mask (i.e.
# 192.168.1.0/24) are also supported. This is a very rudimentary check and is
# by no means a replacement for a proper firewall.
#
# For more fine-grained security, consider using SSL client authentication
# (below).
#
# NOTE: nrpe-ng is not fully compatible with NRPE with regards to this
# parameter: it does not support hostnames.
#
# Default: [blank]

# allowed_hosts=


# SSL KEY AND CERTIFICATE FILE
#
# A valid SSL key and certificate are REQUIRED when running an nrpe-ng server.
# These is used for encrypting and authenticating connections from clients, so
# that the client can be sure it is talking to the correct server - and is thus
# a good defence against man-in-the-middle attacks.
#
# HINT: If you're using Puppet, you can use the current node's Puppet SSL key
# and certificate and avoid having to set up your own SSL infrastructure just
# for nrpe-ng.
#
# Default: [both blank]

ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key


# SSL CLIENT VERIFICATION
#
# If you enable the option below, clients connecting to this server will be
# forced to present an SSL certificate before being able to send commands to
# this server instance. The certificate will be checked for validity against
# the loaded SSL CA list (see below), that it has not yet expired, and so on.
# This is a good security measure to cryptographically authenticate that
# requests are indeed coming from an authorised server.
#
# Default: 0

# ssl_verify_client=0


# SSL CERTIFICATE AUTHORITY
#
# This directive is only used with SSL client verification (above). By default,
# nrpe-ng will load your system's standard Certificate Authority list. With
# client verification enabled, that will permit any valid certificate presented
# from any valid CA, which is probably not what you want. By supplying a path
# to a PEM-encoded file containing one or more certificates, these certificates
# will be loaded _instead_ of your OS list, allowing much finer validation.
#
# HINT: If you're using Puppet, you can use the cached copy of the Puppet CA
# certificate and avoid having to set up your own SSL infrastructure just
# for nrpe-ng.
#
# Default: [blank]

# ssl_ca_file=


# COMMAND ARGUMENT PROCESSING
#
# This option determines whether or not nrpe-ng will allow clients to pass
# arguments to commands that are executed. This is far less risky with nrpe-ng
# than with Nagios NRPE because of the manner that commands are executed:
# commands are run directly and not using a shell, but you should still
# consider carefully before you enable this option.
#
# If you DO decide to use this option, please also take a look at allowed_hosts
# and/or the SSL client security modes above.
#
# Default: 0

# dont_blame_nrpe=0


# BASH COMMAND SUBTITUTION
#
# This option is deliberately NOT supported in nrpe-ng for security reasons. If
# your configuration file enables this option, nrpe-ng will refuse to start.
#
# Default: 0

# allow_bash_command_substitution=0


# COMMAND PREFIX
#
# This option allows you to prefix all commands with a user-defined command.
# This can be used to wrap ALL check commands with another command, for example
# sudo(8). This is probably a very bad idea. Arguments in the command prefix
# are not supported, and will be passed to the check command verbatim.
#
# Default: [blank]

# command_prefix=


# DEBUGGING OPTION
#
# This option determines whether or not debugging messages are produced.
#
# Default: 0

# debug=0


# COMMAND TIMEOUT
#
# This specifies the maximum number of seconds that nrpe-ng will allow plugins
# to run. If they take longer, they will be killed.
#
# Default: 60

# command_timeout=60


# CONNECTION TIMEOUT
#
# This specifies the maximum number of seconds that nrpe-ng will wait for a
# connection to be established before closing the connection. This can be seen
# if a network problem stops the SSL session being established even though the
# underlying TCP connection has established OK.
#
# Default: 300

# connection_timeout=300


# INCLUDE CONFIG FILE
#
# This directive allows you to include definitions from an external config
# file. If the file does not exist or is not readable, it is silently ignored.

# include=/path/to/somefile.cfg


# INCLUDE CONFIG DIRECTORY
#
# This directive allows you to include definitions from config files (with a
# .cfg extension) in one or more directories (with recursion).

# include_dir=/path/to/somedirectory


# COMMAND DEFINITIONS
#
# Command definitions that this daemon will run.  Definitions
# are in the following format:
#
# command[<command_name>]=<command_line>
#
# When the daemon receives a request to return the results of <command_name>
# it will execute the command specified by the <command_line> argument.

# Below are some examples using static arguments:
#
# command[check_hda1]=/usr/lib/nagios/plugins/check_disk -w 20% -c 10% -p /dev/hda1
# command[check_load]=/usr/lib/nagios/plugins/check_load -w 15,10,5 -c 30,25,20
# command[check_total_procs]=/usr/lib/nagios/plugins/check_procs -w 150 -c 200
# command[check_users]=/usr/lib/nagios/plugins/check_users -w 5 -c 10
# command[check_zombie_procs]=/usr/lib/nagios/plugins/check_procs -w 5 -c 10 -s Z

# If you enable command argument processing (dont_blame_nrpe, above) you may
# include variables in the command definition that will be substituted for the
# values given by the client. Variables have the format $varname$, and are
# compatible with NRPE or Nagios arguments of the form $ARGn$.
#
# Here are some examples using argument passing, with NRPE-compatible names:
#
# command[check_disk]=/usr/lib/nagios/plugins/check_disk -w $ARG1$ -c $ARG2$ -p $ARG3$
# command[check_load]=/usr/lib/nagios/plugins/check_load -w $ARG1$ -c $ARG2$
# command[check_procs]=/usr/lib/nagios/plugins/check_procs -w $ARG1$ -c $ARG2$ -s $ARG3$
# command[check_users]=/usr/lib/nagios/plugins/check_users -w $ARG1$ -c $ARG2$
#
# And here are the same examples using arbitrary variable names:
#
# command[check_disk]=/usr/lib/nagios/plugins/check_disk -w $warn$ -c $crit$ -p $path$
# command[check_load]=/usr/lib/nagios/plugins/check_load -w $warn$ -c $crit$
# command[check_procs]=/usr/lib/nagios/plugins/check_procs -w $warn$ -c $crit$ -s $state$
# command[check_users]=/usr/lib/nagios/plugins/check_users -w $warn$ -c $crit$


# LOCAL CONFIGURATION
#
# You may prefer to keep your command definitions outside your main nrpe-ng.cfg
# file. The line below includes a standard configuration file also used by NRPE
# that you may choose to put your definitions in.

include=/etc/nagios/nrpe_local.cfg

# Alternatively, you may prefer to store them in multiple files, which may be
# easier to use with configuration management or packaging systems. Again, the
# line below is a standard NRPE path for compatibility.

include_dir=/etc/nagios/nrpe.d/

